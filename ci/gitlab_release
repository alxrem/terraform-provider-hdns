#!/usr/bin/env python3

import os
import subprocess
from glob import glob
from urllib.parse import urljoin

import requests


def do_release():
    gitlab_token = os.environ["GITLAB_TOKEN"]
    version = os.environ["CI_COMMIT_TAG"]
    project = os.environ["CI_PROJECT_ID"]
    project_url = os.environ["CI_PROJECT_URL"]
    headers = {"PRIVATE-TOKEN": gitlab_token}

    # https://docs.gitlab.com/ee/api/projects.html#upload-a-file
    uploads_url = \
        "https://gitlab.com/api/v4/projects/{}/uploads".format(project)

    # https://docs.gitlab.com/ee/api/releases/#create-a-release
    release_url = \
        "https://gitlab.com/api/v4/projects/{}/releases".format(project)

    binaries = []
    assets_links = []
    for binary in glob("binaries/*"):
        files = {"file": open(binary, "rb")}

        r = requests.post(uploads_url, headers=headers, files=files)
        if r.status_code >= 400:
            print(r.text)
            exit(1)

        upload = r.json()
        binaries.append(upload["markdown"])
        assets_links.append({
            'name': upload['alt'],
            'url': urljoin(project_url + '/', upload['url'].lstrip('/')),
        })

    description = \
        subprocess.getoutput("git tag {} -l --format='%(contents:body)'"
                             .format(version))

    release = {
        "name": version,
        "tag_name": version,
        "description": description,
        'assets': {
            'links': sorted(assets_links, key=lambda x: x['name'], reverse=True),
        }
    }
    r = requests.post(release_url, headers=headers, json=release)
    if r.status_code >= 400:
        print(r.text)
        exit(1)


if __name__ == "__main__":
    do_release()
